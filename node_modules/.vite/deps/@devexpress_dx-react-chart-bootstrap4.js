import {
  clsx_m_default,
  createPopper
} from "./chunk-HLX2OL7V.js";
import {
  AreaSeries,
  ArgumentAxis,
  Axis,
  BarSeries,
  Chart,
  Legend,
  LineSeries,
  Palette,
  PieSeries,
  RIGHT,
  ScatterSeries,
  SplineSeries,
  TOP,
  Title,
  Tooltip,
  ValueAxis,
  ZoomAndPan,
  withPatchedProps
} from "./chunk-I33WR4EN.js";
import "./chunk-ODW4BYFZ.js";
import {
  withComponents
} from "./chunk-FJD3GXP3.js";
import {
  require_react_dom
} from "./chunk-3GS3N7PG.js";
import {
  require_prop_types
} from "./chunk-44UFIAHL.js";
import {
  require_react
} from "./chunk-LL6ON2IQ.js";
import "./chunk-VXGY4DPH.js";
import {
  __commonJS,
  __toESM
} from "./chunk-CEQRFMJQ.js";

// node_modules/react-fast-compare/index.js
var require_react_fast_compare = __commonJS({
  "node_modules/react-fast-compare/index.js"(exports, module) {
    var hasElementType = typeof Element !== "undefined";
    var hasMap = typeof Map === "function";
    var hasSet = typeof Set === "function";
    var hasArrayBuffer = typeof ArrayBuffer === "function" && !!ArrayBuffer.isView;
    function equal(a, b) {
      if (a === b)
        return true;
      if (a && b && typeof a == "object" && typeof b == "object") {
        if (a.constructor !== b.constructor)
          return false;
        var length, i, keys;
        if (Array.isArray(a)) {
          length = a.length;
          if (length != b.length)
            return false;
          for (i = length; i-- !== 0; )
            if (!equal(a[i], b[i]))
              return false;
          return true;
        }
        var it;
        if (hasMap && a instanceof Map && b instanceof Map) {
          if (a.size !== b.size)
            return false;
          it = a.entries();
          while (!(i = it.next()).done)
            if (!b.has(i.value[0]))
              return false;
          it = a.entries();
          while (!(i = it.next()).done)
            if (!equal(i.value[1], b.get(i.value[0])))
              return false;
          return true;
        }
        if (hasSet && a instanceof Set && b instanceof Set) {
          if (a.size !== b.size)
            return false;
          it = a.entries();
          while (!(i = it.next()).done)
            if (!b.has(i.value[0]))
              return false;
          return true;
        }
        if (hasArrayBuffer && ArrayBuffer.isView(a) && ArrayBuffer.isView(b)) {
          length = a.length;
          if (length != b.length)
            return false;
          for (i = length; i-- !== 0; )
            if (a[i] !== b[i])
              return false;
          return true;
        }
        if (a.constructor === RegExp)
          return a.source === b.source && a.flags === b.flags;
        if (a.valueOf !== Object.prototype.valueOf && typeof a.valueOf === "function" && typeof b.valueOf === "function")
          return a.valueOf() === b.valueOf();
        if (a.toString !== Object.prototype.toString && typeof a.toString === "function" && typeof b.toString === "function")
          return a.toString() === b.toString();
        keys = Object.keys(a);
        length = keys.length;
        if (length !== Object.keys(b).length)
          return false;
        for (i = length; i-- !== 0; )
          if (!Object.prototype.hasOwnProperty.call(b, keys[i]))
            return false;
        if (hasElementType && a instanceof Element)
          return false;
        for (i = length; i-- !== 0; ) {
          if ((keys[i] === "_owner" || keys[i] === "__v" || keys[i] === "__o") && a.$$typeof) {
            continue;
          }
          if (!equal(a[keys[i]], b[keys[i]]))
            return false;
        }
        return true;
      }
      return a !== a && b !== b;
    }
    module.exports = function isEqual2(a, b) {
      try {
        return equal(a, b);
      } catch (error) {
        if ((error.message || "").match(/stack|recursion/i)) {
          console.warn("react-fast-compare cannot handle circular refs");
          return false;
        }
        throw error;
      }
    };
  }
});

// node_modules/warning/warning.js
var require_warning = __commonJS({
  "node_modules/warning/warning.js"(exports, module) {
    "use strict";
    var __DEV__ = true;
    var warning2 = function() {
    };
    if (__DEV__) {
      printWarning = function printWarning2(format, args) {
        var len = arguments.length;
        args = new Array(len > 1 ? len - 1 : 0);
        for (var key = 1; key < len; key++) {
          args[key - 1] = arguments[key];
        }
        var argIndex = 0;
        var message = "Warning: " + format.replace(/%s/g, function() {
          return args[argIndex++];
        });
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x) {
        }
      };
      warning2 = function(condition, format, args) {
        var len = arguments.length;
        args = new Array(len > 2 ? len - 2 : 0);
        for (var key = 2; key < len; key++) {
          args[key - 2] = arguments[key];
        }
        if (format === void 0) {
          throw new Error(
            "`warning(condition, format, ...args)` requires a warning message argument"
          );
        }
        if (!condition) {
          printWarning.apply(null, [format].concat(args));
        }
      };
    }
    var printWarning;
    module.exports = warning2;
  }
});

// node_modules/@devexpress/dx-react-chart-bootstrap4/dist/dx-react-chart-bootstrap4.es.js
var import_react = __toESM(require_react());
var import_prop_types = __toESM(require_prop_types());
var import_react_dom = __toESM(require_react_dom());

// node_modules/@devexpress/dx-react-chart-bootstrap4/node_modules/react-popper/lib/esm/Popper.js
var React4 = __toESM(require_react());

// node_modules/@devexpress/dx-react-chart-bootstrap4/node_modules/react-popper/lib/esm/Manager.js
var React = __toESM(require_react());
var ManagerReferenceNodeContext = React.createContext();
var ManagerReferenceNodeSetterContext = React.createContext();

// node_modules/@devexpress/dx-react-chart-bootstrap4/node_modules/react-popper/lib/esm/utils.js
var React2 = __toESM(require_react());
var unwrapArray = function unwrapArray2(arg) {
  return Array.isArray(arg) ? arg[0] : arg;
};
var safeInvoke = function safeInvoke2(fn) {
  if (typeof fn === "function") {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }
    return fn.apply(void 0, args);
  }
};
var setRef = function setRef2(ref, node) {
  if (typeof ref === "function") {
    return safeInvoke(ref, node);
  } else if (ref != null) {
    ref.current = node;
  }
};
var fromEntries = function fromEntries2(entries) {
  return entries.reduce(function(acc, _ref) {
    var key = _ref[0], value = _ref[1];
    acc[key] = value;
    return acc;
  }, {});
};
var useIsomorphicLayoutEffect = typeof window !== "undefined" && window.document && window.document.createElement ? React2.useLayoutEffect : React2.useEffect;

// node_modules/@devexpress/dx-react-chart-bootstrap4/node_modules/react-popper/lib/esm/usePopper.js
var React3 = __toESM(require_react());
var import_react_fast_compare = __toESM(require_react_fast_compare());
var EMPTY_MODIFIERS = [];
var usePopper = function usePopper2(referenceElement, popperElement, options) {
  if (options === void 0) {
    options = {};
  }
  var prevOptions = React3.useRef(null);
  var optionsWithDefaults = {
    onFirstUpdate: options.onFirstUpdate,
    placement: options.placement || "bottom",
    strategy: options.strategy || "absolute",
    modifiers: options.modifiers || EMPTY_MODIFIERS
  };
  var _React$useState = React3.useState({
    styles: {
      popper: {
        position: optionsWithDefaults.strategy,
        left: "0",
        top: "0"
      },
      arrow: {
        position: "absolute"
      }
    },
    attributes: {}
  }), state = _React$useState[0], setState = _React$useState[1];
  var updateStateModifier = React3.useMemo(function() {
    return {
      name: "updateState",
      enabled: true,
      phase: "write",
      fn: function fn(_ref) {
        var state2 = _ref.state;
        var elements = Object.keys(state2.elements);
        setState({
          styles: fromEntries(elements.map(function(element) {
            return [element, state2.styles[element] || {}];
          })),
          attributes: fromEntries(elements.map(function(element) {
            return [element, state2.attributes[element]];
          }))
        });
      },
      requires: ["computeStyles"]
    };
  }, []);
  var popperOptions = React3.useMemo(function() {
    var newOptions = {
      onFirstUpdate: optionsWithDefaults.onFirstUpdate,
      placement: optionsWithDefaults.placement,
      strategy: optionsWithDefaults.strategy,
      modifiers: [].concat(optionsWithDefaults.modifiers, [updateStateModifier, {
        name: "applyStyles",
        enabled: false
      }])
    };
    if ((0, import_react_fast_compare.default)(prevOptions.current, newOptions)) {
      return prevOptions.current || newOptions;
    } else {
      prevOptions.current = newOptions;
      return newOptions;
    }
  }, [optionsWithDefaults.onFirstUpdate, optionsWithDefaults.placement, optionsWithDefaults.strategy, optionsWithDefaults.modifiers, updateStateModifier]);
  var popperInstanceRef = React3.useRef();
  useIsomorphicLayoutEffect(function() {
    if (popperInstanceRef.current) {
      popperInstanceRef.current.setOptions(popperOptions);
    }
  }, [popperOptions]);
  useIsomorphicLayoutEffect(function() {
    if (referenceElement == null || popperElement == null) {
      return;
    }
    var createPopper2 = options.createPopper || createPopper;
    var popperInstance = createPopper2(referenceElement, popperElement, popperOptions);
    popperInstanceRef.current = popperInstance;
    return function() {
      popperInstance.destroy();
      popperInstanceRef.current = null;
    };
  }, [referenceElement, popperElement, options.createPopper]);
  return {
    state: popperInstanceRef.current ? popperInstanceRef.current.state : null,
    styles: state.styles,
    attributes: state.attributes,
    update: popperInstanceRef.current ? popperInstanceRef.current.update : null,
    forceUpdate: popperInstanceRef.current ? popperInstanceRef.current.forceUpdate : null
  };
};

// node_modules/@devexpress/dx-react-chart-bootstrap4/node_modules/react-popper/lib/esm/Popper.js
var NOOP = function NOOP2() {
  return void 0;
};
var NOOP_PROMISE = function NOOP_PROMISE2() {
  return Promise.resolve(null);
};
var EMPTY_MODIFIERS2 = [];
function Popper(_ref) {
  var _ref$placement = _ref.placement, placement = _ref$placement === void 0 ? "bottom" : _ref$placement, _ref$strategy = _ref.strategy, strategy = _ref$strategy === void 0 ? "absolute" : _ref$strategy, _ref$modifiers = _ref.modifiers, modifiers = _ref$modifiers === void 0 ? EMPTY_MODIFIERS2 : _ref$modifiers, referenceElement = _ref.referenceElement, onFirstUpdate = _ref.onFirstUpdate, innerRef = _ref.innerRef, children = _ref.children;
  var referenceNode = React4.useContext(ManagerReferenceNodeContext);
  var _React$useState = React4.useState(null), popperElement = _React$useState[0], setPopperElement = _React$useState[1];
  var _React$useState2 = React4.useState(null), arrowElement = _React$useState2[0], setArrowElement = _React$useState2[1];
  React4.useEffect(function() {
    setRef(innerRef, popperElement);
  }, [innerRef, popperElement]);
  var options = React4.useMemo(function() {
    return {
      placement,
      strategy,
      onFirstUpdate,
      modifiers: [].concat(modifiers, [{
        name: "arrow",
        enabled: arrowElement != null,
        options: {
          element: arrowElement
        }
      }])
    };
  }, [placement, strategy, onFirstUpdate, modifiers, arrowElement]);
  var _usePopper = usePopper(referenceElement || referenceNode, popperElement, options), state = _usePopper.state, styles = _usePopper.styles, forceUpdate = _usePopper.forceUpdate, update = _usePopper.update;
  var childrenProps = React4.useMemo(function() {
    return {
      ref: setPopperElement,
      style: styles.popper,
      placement: state ? state.placement : placement,
      hasPopperEscaped: state && state.modifiersData.hide ? state.modifiersData.hide.hasPopperEscaped : null,
      isReferenceHidden: state && state.modifiersData.hide ? state.modifiersData.hide.isReferenceHidden : null,
      arrowProps: {
        style: styles.arrow,
        ref: setArrowElement
      },
      forceUpdate: forceUpdate || NOOP,
      update: update || NOOP_PROMISE
    };
  }, [setPopperElement, setArrowElement, placement, state, styles, update, forceUpdate]);
  return unwrapArray(children)(childrenProps);
}

// node_modules/@devexpress/dx-react-chart-bootstrap4/node_modules/react-popper/lib/esm/Reference.js
var React5 = __toESM(require_react());
var import_warning = __toESM(require_warning());

// node_modules/@devexpress/dx-react-chart-bootstrap4/dist/dx-react-chart-bootstrap4.es.js
var withClassName = (...args) => {
  const setClassName2 = ({
    className,
    ...restProps
  }) => ({
    className: clsx_m_default(...args, className),
    ...restProps
  });
  return withPatchedProps(setClassName2);
};
var Root = withClassName("dx-c-bs4-container")(Chart.Root);
var Label = withClassName("dx-c-bs4-fill-current-color", "dx-c-bs4-label", "text-muted")(Chart.Label);
var palette = ["#0070ff", "#d72e3d", "#249d3d", "#ffb90c", "#1698af", "#616a72"];
var ChartWithPalette = ({
  children,
  ...props
}) => (0, import_react.createElement)(Chart, props, (0, import_react.createElement)(Palette, {
  scheme: palette
}), children);
ChartWithPalette.components = Chart.components;
true ? ChartWithPalette.propTypes = {
  children: import_prop_types.default.node.isRequired
} : void 0;
var Chart2 = withComponents({
  Root
})(ChartWithPalette);
Chart2.Label = Label;
var Root$1 = withClassName("list-group", "py-3")((props) => (0, import_react.createElement)("ul", props));
var Label$1 = withClassName("text-body", "pl-2", "pr-2")(({
  text,
  ...restProps
}) => (0, import_react.createElement)("span", restProps, text));
var Item = withClassName("d-flex", "list-group-item", "border-0", "py-1", "px-4", "align-items-center")((props) => (0, import_react.createElement)("li", props));
var Legend2 = withComponents({
  Root: Root$1,
  Item,
  Label: Label$1
})(Legend);
var Text = withClassName("w-100", "text-center", "mb-3")(({
  text,
  ...restProps
}) => (0, import_react.createElement)("h3", restProps, text));
var Title2 = withComponents({
  Text
})(Title);
var setClassName = ({
  classes,
  ...restProps
}) => {
  if (restProps.state) {
    const {
      className,
      ...rest
    } = restProps;
    return {
      className: clsx_m_default("dx-c-bs4-fill-background-color", className),
      ...rest
    };
  }
  return restProps;
};
var Point = withPatchedProps(setClassName)(ScatterSeries.Point);
var ScatterSeries2 = withComponents({
  Point
})(ScatterSeries);
var Root$2 = withClassName("dx-c-bs4-crisp-edges")(Axis.Root);
var Tick = withClassName("dx-c-bs4-stroke-current-color", "dx-c-bs4-crisp-edges", "dx-c-bs4-axis-opacity")(Axis.Tick);
var Label$2 = withClassName("dx-c-bs4-fill-current-color", "dx-c-bs4-label", "text-muted")(Axis.Label);
var Line = withClassName("dx-c-bs4-stroke-current-color", "dx-c-bs4-axis-opacity")(Axis.Line);
var Grid = withClassName("dx-c-bs4-stroke-current-color", "dx-c-bs4-crisp-edges", "dx-c-bs4-axis-opacity")(Axis.Grid);
var ValueAxis2 = withComponents({
  Root: Root$2,
  Tick,
  Label: Label$2,
  Line,
  Grid
})(ValueAxis);
var ArgumentAxis2 = withComponents({
  Root: Root$2,
  Tick,
  Label: Label$2,
  Line,
  Grid
})(ArgumentAxis);
function _extends() {
  _extends = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
var DefaultArrowComponent = (0, import_react.forwardRef)(({
  placement,
  ...restProps
}, ref) => (0, import_react.createElement)("div", _extends({
  className: "arrow",
  ref
}, restProps)));
DefaultArrowComponent.propTypes = {
  placement: import_prop_types.default.string.isRequired
};
var Popover = class extends import_react.PureComponent {
  constructor(props) {
    super(props);
    this.contentRef = (0, import_react.createRef)();
    this.handleClick = this.handleClick.bind(this);
  }
  componentDidMount() {
    const {
      isOpen,
      toggle
    } = this.props;
    if (isOpen && toggle) {
      this.attachDocumentEvents();
    }
  }
  componentDidUpdate() {
    const {
      isOpen,
      toggle
    } = this.props;
    if (isOpen && toggle) {
      this.attachDocumentEvents();
    } else {
      this.detachDocumentEvents();
    }
  }
  componentWillUnmount() {
    this.detachDocumentEvents();
  }
  handleClick(e) {
    const {
      target: eventTarget
    } = e;
    const {
      current: contentNode
    } = this.contentRef;
    const {
      toggle,
      target
    } = this.props;
    if (contentNode && !contentNode.contains(eventTarget) && !target.contains(eventTarget)) {
      toggle();
    }
  }
  attachDocumentEvents() {
    if (!this.listenersAttached) {
      this.toggleDocumentEvents("addEventListener");
      this.listenersAttached = true;
    }
  }
  detachDocumentEvents() {
    if (this.listenersAttached) {
      this.toggleDocumentEvents("removeEventListener");
      this.listenersAttached = false;
    }
  }
  toggleDocumentEvents(method) {
    ["click", "touchstart"].forEach((eventType) => {
      document[method](eventType, this.handleClick, true);
    });
  }
  renderPopper() {
    const {
      children,
      target,
      renderInBody,
      arrowComponent: ArrowComponent,
      modifiers = [],
      ...restProps
    } = this.props;
    const popperModifiers2 = [{
      name: "offset",
      options: {
        offset: [0, 8]
      }
    }, ...modifiers];
    return (0, import_react.createElement)(Popper, _extends({
      referenceElement: target,
      modifiers: popperModifiers2
    }, restProps), ({
      ref,
      style,
      arrowProps,
      placement
    }) => (0, import_react.createElement)("div", {
      className: `popover show bs-popover-${placement}`,
      ref,
      style
    }, (0, import_react.createElement)("div", {
      className: "popover-inner",
      ref: this.contentRef
    }, children), (0, import_react.createElement)(ArrowComponent, _extends({}, arrowProps, {
      placement: restProps.placement
    }))));
  }
  render() {
    const {
      isOpen,
      renderInBody
    } = this.props;
    if (!isOpen)
      return null;
    return renderInBody ? (0, import_react_dom.createPortal)(this.renderPopper(), document.body) : this.renderPopper();
  }
};
true ? Popover.propTypes = {
  renderInBody: import_prop_types.default.bool,
  placement: import_prop_types.default.string,
  isOpen: import_prop_types.default.bool,
  children: import_prop_types.default.node.isRequired,
  target: import_prop_types.default.oneOfType([import_prop_types.default.instanceOf(typeof Element !== "undefined" ? Element : Object), import_prop_types.default.object]),
  toggle: import_prop_types.default.func,
  arrowComponent: import_prop_types.default.oneOfType([import_prop_types.default.func, import_prop_types.default.object])
} : void 0;
Popover.defaultProps = {
  target: null,
  renderInBody: true,
  isOpen: false,
  placement: "auto",
  toggle: void 0,
  arrowComponent: DefaultArrowComponent
};
var popperModifiers = [{
  name: "flip",
  enabled: false
}, {
  name: "preventOverflow",
  options: {
    altAxis: true
  }
}];
var Overlay = class extends import_react.PureComponent {
  render() {
    const {
      children,
      target,
      rotated,
      ...restProps
    } = this.props;
    return (0, import_react.createElement)(Popover, _extends({
      placement: rotated ? RIGHT : TOP,
      isOpen: true,
      target,
      modifiers: popperModifiers
    }, restProps), children);
  }
};
true ? Overlay.propTypes = {
  children: import_prop_types.default.node.isRequired,
  target: import_prop_types.default.any.isRequired,
  rotated: import_prop_types.default.bool.isRequired,
  arrowComponent: import_prop_types.default.oneOfType([import_prop_types.default.func, import_prop_types.default.object]).isRequired
} : void 0;
var Content = ({
  text,
  targetItem,
  ...restProps
}) => (0, import_react.createElement)("span", restProps, text);
true ? Content.propTypes = {
  text: import_prop_types.default.string.isRequired,
  targetItem: import_prop_types.default.shape({
    series: import_prop_types.default.string.isRequired,
    point: import_prop_types.default.number.isRequired
  })
} : void 0;
Content.defaultProps = {
  targetItem: void 0
};
var Arrow = (0, import_react.forwardRef)(({
  className,
  placement,
  ...restProps
}, ref) => (0, import_react.createElement)("div", _extends({
  className: clsx_m_default("arrow", className),
  ref
}, restProps)));
Arrow.propTypes = {
  placement: import_prop_types.default.string.isRequired,
  className: import_prop_types.default.string
};
Arrow.defaultProps = {
  className: void 0
};
var Sheet = ({
  className,
  ...restProps
}) => (0, import_react.createElement)("div", _extends({
  className: clsx_m_default("popover-body", className)
}, restProps));
true ? Sheet.propTypes = {
  className: import_prop_types.default.string
} : void 0;
Sheet.defaultProps = {
  className: void 0
};
var Tooltip2 = withComponents({
  Overlay,
  Content,
  Arrow,
  Sheet
})(Tooltip);
var DragBox = withClassName("bg-secondary", "dx-c-bs4-rect-opacity")(ZoomAndPan.DragBox);
var ZoomAndPan2 = withComponents({
  DragBox
})(ZoomAndPan);
export {
  AreaSeries,
  ArgumentAxis2 as ArgumentAxis,
  BarSeries,
  Chart2 as Chart,
  Legend2 as Legend,
  LineSeries,
  PieSeries,
  ScatterSeries2 as ScatterSeries,
  SplineSeries,
  Title2 as Title,
  Tooltip2 as Tooltip,
  ValueAxis2 as ValueAxis,
  ZoomAndPan2 as ZoomAndPan
};
//# sourceMappingURL=@devexpress_dx-react-chart-bootstrap4.js.map
