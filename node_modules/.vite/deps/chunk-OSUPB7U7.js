import {
  require_prop_types
} from "./chunk-44UFIAHL.js";
import {
  require_react_dom
} from "./chunk-3GS3N7PG.js";
import {
  require_react
} from "./chunk-LL6ON2IQ.js";
import {
  __toESM
} from "./chunk-CEQRFMJQ.js";

// node_modules/@devexpress/dx-react-core/dist/dx-react-core.es.js
var import_react = __toESM(require_react());

// node_modules/@devexpress/dx-core/dist/dx-core.es.js
function __read(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
}
function __spreadArray(to, from, pack) {
  if (pack || arguments.length === 2)
    for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
        if (!ar)
          ar = Array.prototype.slice.call(from, 0, i);
        ar[i] = from[i];
      }
    }
  return to.concat(ar || from);
}
var compare = function(a, b) {
  var aPosition = a.position();
  var bPosition = b.position();
  for (var i = 0; i < Math.min(aPosition.length, bPosition.length); i += 1) {
    if (aPosition[i] < bPosition[i])
      return -1;
    if (aPosition[i] > bPosition[i])
      return 1;
  }
  return aPosition.length - bPosition.length;
};
var insertPlugin = function(array, newItem) {
  var result = array.slice();
  var nextItemIndex = array.findIndex(function(item) {
    return compare(newItem, item) <= 0;
  });
  var targetIndex = nextItemIndex < 0 ? array.length : nextItemIndex;
  var alreadyExists = targetIndex >= 0 && targetIndex < array.length && compare(newItem, array[targetIndex]) === 0;
  var deletedItems = 0;
  if (alreadyExists) {
    deletedItems = 1;
    var targetItemPosition = result[targetIndex].position();
    if (targetItemPosition.length > 1) {
      for (var i = targetIndex + 1; i < result.length; i += 1) {
        var itemPosition = result[i].position();
        if (targetItemPosition.length === itemPosition.length && targetItemPosition[targetItemPosition.length - 2] === itemPosition[itemPosition.length - 2]) {
          deletedItems += 1;
        } else {
          break;
        }
      }
    }
  }
  result.splice(targetIndex, deletedItems, newItem);
  return result;
};
var removePlugin = function(array, item) {
  var itemIndex = array.indexOf(item);
  return itemIndex >= 0 ? __spreadArray(__spreadArray([], __read(array.slice(0, itemIndex)), false), __read(array.slice(itemIndex + 1)), false) : array;
};
var hasWindow = function() {
  return typeof window !== "undefined";
};
var getDependencyError = function(pluginName, dependencyName) {
  return new Error("The '".concat(pluginName, "' plugin requires '").concat(dependencyName, "' to be defined before it."));
};
var PluginHost = function() {
  function PluginHost3() {
    this.gettersCache = {};
    this.knownKeysCache = {};
    this.validationRequired = true;
    this.plugins = [];
    this.subscriptions = /* @__PURE__ */ new Set();
  }
  PluginHost3.prototype.ensureDependencies = function() {
    var defined = /* @__PURE__ */ new Set();
    var knownOptionals = /* @__PURE__ */ new Map();
    this.plugins.filter(function(plugin) {
      return plugin.container;
    }).forEach(function(plugin) {
      var pluginName = plugin.name || "";
      if (knownOptionals.has(pluginName)) {
        throw getDependencyError(knownOptionals.get(pluginName), pluginName);
      }
      (plugin.dependencies || []).forEach(function(dependency) {
        if (defined.has(dependency.name))
          return;
        if (dependency.optional) {
          if (!knownOptionals.has(dependency.name)) {
            knownOptionals.set(dependency.name, pluginName);
          }
          return;
        }
        throw getDependencyError(pluginName, dependency.name);
      });
      defined.add(pluginName);
    });
  };
  PluginHost3.prototype.registerPlugin = function(plugin) {
    this.plugins = insertPlugin(this.plugins, plugin);
    this.cleanPluginsCache();
  };
  PluginHost3.prototype.unregisterPlugin = function(plugin) {
    this.plugins = removePlugin(this.plugins, plugin);
    this.cleanPluginsCache();
  };
  PluginHost3.prototype.knownKeys = function(postfix) {
    if (!this.knownKeysCache[postfix]) {
      this.knownKeysCache[postfix] = Array.from(this.plugins.map(function(plugin) {
        return Object.keys(plugin);
      }).map(function(keys) {
        return keys.filter(function(key) {
          return key.endsWith(postfix);
        })[0];
      }).filter(function(key) {
        return !!key;
      }).reduce(function(acc, key) {
        return acc.add(key);
      }, /* @__PURE__ */ new Set())).map(function(key) {
        return key.replace(postfix, "");
      });
    }
    return this.knownKeysCache[postfix];
  };
  PluginHost3.prototype.collect = function(key, upTo) {
    if (this.validationRequired) {
      this.ensureDependencies();
      this.validationRequired = false;
    }
    var res = this.gettersCache[key];
    if (!res) {
      var indexCache = this.plugins.map(function(plugin, index) {
        return { key: plugin[key], index };
      }).filter(function(plugin) {
        return !!plugin.key;
      });
      this.gettersCache["".concat(key, "_i")] = indexCache;
      res = indexCache.map(function(item) {
        return item.key;
      });
      this.gettersCache[key] = res;
    }
    if (!upTo)
      return res;
    var upToIndex = this.plugins.indexOf(upTo);
    var upToIndexKey = key + upToIndex;
    var upToRes = this.gettersCache[upToIndexKey];
    if (!upToRes) {
      var indexCache_1 = this.gettersCache["".concat(key, "_i")];
      upToRes = this.gettersCache[key].filter(function(getter, index) {
        return indexCache_1[index].index < upToIndex;
      });
      this.gettersCache[upToIndexKey] = upToRes;
    }
    return upToRes;
  };
  PluginHost3.prototype.get = function(key, upTo) {
    var plugins = this.collect(key, upTo);
    if (!plugins.length)
      return void 0;
    var result;
    plugins.forEach(function(plugin) {
      result = plugin(result);
    });
    return result;
  };
  PluginHost3.prototype.registerSubscription = function(subscription) {
    this.subscriptions.add(subscription);
  };
  PluginHost3.prototype.unregisterSubscription = function(subscription) {
    this.subscriptions.delete(subscription);
  };
  PluginHost3.prototype.broadcast = function(event, message) {
    this.subscriptions.forEach(function(subscription) {
      return subscription[event] && subscription[event](message);
    });
  };
  PluginHost3.prototype.cleanPluginsCache = function() {
    this.validationRequired = true;
    this.gettersCache = {};
    this.knownKeysCache = {};
  };
  return PluginHost3;
}();
var EventEmitter = function() {
  function EventEmitter2() {
    this.handlers = [];
  }
  EventEmitter2.prototype.emit = function(e) {
    this.handlers.forEach(function(handler) {
      return handler(e);
    });
  };
  EventEmitter2.prototype.subscribe = function(handler) {
    this.handlers.push(handler);
  };
  EventEmitter2.prototype.unsubscribe = function(handler) {
    this.handlers.splice(this.handlers.indexOf(handler), 1);
  };
  return EventEmitter2;
}();
var shallowEqual = function(objA, objB) {
  if (objA === objB) {
    return true;
  }
  var keysA = Object.keys(objA);
  var keysB = Object.keys(objB);
  if (keysA.length !== keysB.length) {
    return false;
  }
  var hasOwn = Object.prototype.hasOwnProperty;
  for (var i = 0; i < keysA.length; i += 1) {
    if (!hasOwn.call(objB, keysA[i]) || objA[keysA[i]] !== objB[keysA[i]]) {
      return false;
    }
    var valA = objA[keysA[i]];
    var valB = objB[keysA[i]];
    if (valA !== valB) {
      return false;
    }
  }
  return true;
};

// node_modules/@devexpress/dx-react-core/dist/dx-react-core.es.js
var import_react_dom = __toESM(require_react_dom());
var import_prop_types = __toESM(require_prop_types());
var extendStatics = function(d, b) {
  extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
    d2.__proto__ = b2;
  } || function(d2, b2) {
    for (var p in b2)
      if (Object.prototype.hasOwnProperty.call(b2, p))
        d2[p] = b2[p];
  };
  return extendStatics(d, b);
};
function __extends(d, b) {
  if (typeof b !== "function" && b !== null)
    throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
  extendStatics(d, b);
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign = function() {
  __assign = Object.assign || function __assign2(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
function __rest(s, e) {
  var t = {};
  for (var p in s)
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
}
function __read2(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
}
function __spreadArray2(to, from, pack) {
  if (pack || arguments.length === 2)
    for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
        if (!ar)
          ar = Array.prototype.slice.call(from, 0, i);
        ar[i] = from[i];
      }
    }
  return to.concat(ar || from);
}
var PluginHostContext = (0, import_react.createContext)(null);
var PositionContext = (0, import_react.createContext)(function() {
  return [];
});
var TemplateHostContext = (0, import_react.createContext)(null);
var PluginIndexer = function(_super) {
  __extends(PluginIndexer2, _super);
  function PluginIndexer2() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this.indexes = {};
    _this.memoize = function(index, positionContext) {
      if (_this.indexes[index])
        return _this.indexes[index];
      var fn = function() {
        var calculatedPosition = positionContext();
        return __spreadArray2(__spreadArray2([], __read2(calculatedPosition), false), [index], false);
      };
      _this.indexes[index] = fn;
      return fn;
    };
    return _this;
  }
  PluginIndexer2.prototype.render = function() {
    var _this = this;
    var children = this.props.children;
    return (0, import_react.createElement)(PositionContext.Consumer, null, function(positionContext) {
      return import_react.Children.map(children, function(child, index) {
        if (!child || !child.type)
          return child;
        var childPosition = _this.memoize(index, positionContext);
        return (0, import_react.createElement)(PositionContext.Provider, { key: String(index), value: childPosition }, child);
      });
    });
  };
  return PluginIndexer2;
}(import_react.PureComponent);
var PLUGIN_HOST_CONTEXT = "dxcore_pluginHost_context";
var POSITION_CONTEXT = "dxcore_position_context";
var TEMPLATE_HOST_CONTEXT = "dxcore_templateHost_context";
var RERENDER_TEMPLATE_EVENT = Symbol("rerenderTemplate");
var RERENDER_TEMPLATE_SCOPE_EVENT = Symbol("rerenderTemplateScope");
var UPDATE_CONNECTION_EVENT = Symbol("updateConnection");
var withContext = function(Context, name) {
  return function(Component2) {
    return function(props) {
      return (0, import_react.createElement)(Context.Consumer, null, function(context) {
        var _a;
        return (0, import_react.createElement)(Component2, __assign({}, props, (_a = {}, _a[name] = context, _a)));
      });
    };
  };
};
var withHostAndPosition = function(Component2) {
  return withContext(PluginHostContext, PLUGIN_HOST_CONTEXT)(withContext(PositionContext, POSITION_CONTEXT)(Component2));
};
var PluginBase = function(_super) {
  __extends(PluginBase2, _super);
  function PluginBase2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  PluginBase2.prototype.componentDidMount = function() {
    var _a = this.props, _b = PLUGIN_HOST_CONTEXT, pluginHost = _a[_b], _c = POSITION_CONTEXT, position = _a[_c];
    var _d = this.props, name = _d.name, dependencies = _d.dependencies;
    this.plugin = {
      position,
      name,
      dependencies,
      container: true
    };
    pluginHost.registerPlugin(this.plugin);
    pluginHost.ensureDependencies();
  };
  PluginBase2.prototype.componentDidUpdate = function() {
    var _a = this.props, _b = PLUGIN_HOST_CONTEXT, pluginHost = _a[_b];
    pluginHost.ensureDependencies();
  };
  PluginBase2.prototype.componentWillUnmount = function() {
    var _a = this.props, _b = PLUGIN_HOST_CONTEXT, pluginHost = _a[_b];
    pluginHost.unregisterPlugin(this.plugin);
  };
  PluginBase2.prototype.render = function() {
    var children = this.props.children;
    return (0, import_react.createElement)(PluginIndexer, null, children);
  };
  return PluginBase2;
}(import_react.PureComponent);
var Plugin = withHostAndPosition(PluginBase);
var getRenderingData = function(props) {
  var name = props.name, params = props.params;
  if (name) {
    var _a = props, _b = PLUGIN_HOST_CONTEXT, pluginHost = _a[_b];
    return {
      params,
      templates: pluginHost.collect("".concat(name, "Template")).filter(function(template) {
        return template.predicate(params);
      }).reverse()
    };
  }
  var _c = props, _d = TEMPLATE_HOST_CONTEXT, templateHost = _c[_d];
  return {
    params: params || templateHost.params(),
    templates: templateHost.templates()
  };
};
var TemplatePlaceholderBase = function(_super) {
  __extends(TemplatePlaceholderBase2, _super);
  function TemplatePlaceholderBase2() {
    var _a;
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this.subscription = (_a = {}, _a[RERENDER_TEMPLATE_EVENT] = function(id) {
      if (_this.template && _this.template.id === id) {
        _this.forceUpdate();
      }
    }, _a[RERENDER_TEMPLATE_SCOPE_EVENT] = function(name) {
      var propsName = _this.props.name;
      if (propsName === name) {
        _this.forceUpdate();
      }
    }, _a);
    _this.template = null;
    _this.params = {};
    return _this;
  }
  TemplatePlaceholderBase2.prototype.componentDidMount = function() {
    var _a = this.props, _b = PLUGIN_HOST_CONTEXT, pluginHost = _a[_b];
    pluginHost.registerSubscription(this.subscription);
  };
  TemplatePlaceholderBase2.prototype.shouldComponentUpdate = function(nextProps) {
    var _a = getRenderingData(nextProps), params = _a.params, templates = _a.templates;
    var _b = __read2(templates, 1), template = _b[0];
    var children = this.props.children;
    return children !== nextProps.children || templates.length !== getRenderingData(this.props).templates.length || this.template !== template || !shallowEqual(this.params, params);
  };
  TemplatePlaceholderBase2.prototype.componentWillUnmount = function() {
    var _a = this.props, _b = PLUGIN_HOST_CONTEXT, pluginHost = _a[_b];
    pluginHost.unregisterSubscription(this.subscription);
  };
  TemplatePlaceholderBase2.prototype.render = function() {
    var _a;
    var _this = this;
    var _b = getRenderingData(this.props), params = _b.params, templates = _b.templates;
    this.params = params;
    _a = __read2(templates, 1), this.template = _a[0];
    var restTemplates = templates.slice(1);
    var content = null;
    if (this.template) {
      var templateContent = this.template.children;
      content = templateContent() || null;
      if (content && typeof content === "function") {
        content = content(params);
      }
    }
    var templatePlaceholder = this.props.children;
    return (0, import_react.createElement)(TemplateHostContext.Provider, { value: {
      templates: function() {
        return restTemplates;
      },
      params: function() {
        return _this.params;
      }
    } }, templatePlaceholder ? templatePlaceholder(content) : content);
  };
  return TemplatePlaceholderBase2;
}(import_react.Component);
var TemplatePlaceholder = withContext(PluginHostContext, PLUGIN_HOST_CONTEXT)(withContext(TemplateHostContext, TEMPLATE_HOST_CONTEXT)(TemplatePlaceholderBase));
var PlaceholderWithRef = function(_a) {
  var params = _a.params, forwardedRef = _a.forwardedRef;
  return (0, import_react.createElement)(TemplatePlaceholder, { params: __assign(__assign({}, params), { forwardedRef }) });
};
var PluginHostBase = function(_super) {
  __extends(PluginHostBase2, _super);
  function PluginHostBase2(props) {
    var _this = _super.call(this, props) || this;
    _this.host = new PluginHost();
    return _this;
  }
  PluginHostBase2.prototype.render = function() {
    var children = this.props.children;
    return (0, import_react.createElement)(
      PluginHostContext.Provider,
      { value: this.host },
      (0, import_react.createElement)(PluginIndexer, null, children),
      (0, import_react.createElement)(TemplatePlaceholder, { name: "root" })
    );
  };
  return PluginHostBase2;
}(import_react.PureComponent);
var PluginHost2 = PluginHostBase;
var getAvailableGetters = function(pluginHost, getGetterValue) {
  if (getGetterValue === void 0) {
    getGetterValue = function(getterName) {
      return pluginHost.get("".concat(getterName, "Getter"));
    };
  }
  var trackedDependencies = {};
  var getters;
  if (typeof Proxy !== "undefined") {
    getters = new Proxy({}, {
      get: function(target, prop) {
        if (typeof prop !== "string")
          return void 0;
        var result = getGetterValue(prop);
        trackedDependencies[prop] = result;
        return result;
      },
      getOwnPropertyDescriptor: function(target, prop) {
        return {
          configurable: true,
          enumerable: true,
          value: this.get(target, prop, void 0)
        };
      },
      ownKeys: function() {
        return pluginHost.knownKeys("Getter");
      }
    });
  } else {
    getters = pluginHost.knownKeys("Getter").reduce(function(acc, getterName) {
      Object.defineProperty(acc, getterName, {
        get: function() {
          var result = getGetterValue(getterName);
          trackedDependencies[getterName] = result;
          return result;
        }
      });
      return acc;
    }, {});
  }
  return { getters, trackedDependencies };
};
var isTrackedDependenciesChanged = function(pluginHost, prevTrackedDependencies, getGetterValue) {
  if (getGetterValue === void 0) {
    getGetterValue = function(getterName) {
      return pluginHost.get("".concat(getterName, "Getter"));
    };
  }
  var trackedDependencies = Object.keys(prevTrackedDependencies).reduce(function(acc, getterName) {
    var _a;
    return Object.assign(acc, (_a = {}, _a[getterName] = getGetterValue(getterName), _a));
  }, {});
  return !shallowEqual(prevTrackedDependencies, trackedDependencies);
};
var getAvailableActions = function(pluginHost, getAction) {
  if (getAction === void 0) {
    getAction = function(actionName) {
      return pluginHost.collect("".concat(actionName, "Action")).slice().reverse()[0];
    };
  }
  var actions;
  if (typeof Proxy !== "undefined") {
    actions = new Proxy({}, {
      get: function(target, prop) {
        if (typeof prop !== "string")
          return void 0;
        return getAction(prop);
      },
      getOwnPropertyDescriptor: function(target, prop) {
        return {
          configurable: true,
          enumerable: true,
          value: this.get(target, prop, void 0)
        };
      },
      ownKeys: function() {
        return pluginHost.knownKeys("Action");
      }
    });
  } else {
    actions = pluginHost.knownKeys("Action").reduce(function(acc, actionName) {
      Object.defineProperty(acc, actionName, {
        get: function() {
          return getAction(actionName);
        }
      });
      return acc;
    }, {});
  }
  return actions;
};
var ActionBase = function(_super) {
  __extends(ActionBase2, _super);
  function ActionBase2(props) {
    var _a;
    var _this = _super.call(this, props) || this;
    var _b = props, _c = PLUGIN_HOST_CONTEXT, pluginHost = _b[_c], _d = POSITION_CONTEXT, positionContext = _b[_d];
    var name = props.name;
    _this.plugin = (_a = {
      position: function() {
        return positionContext();
      }
    }, _a["".concat(name, "Action")] = function(params) {
      var action = _this.props.action;
      var getters = getAvailableGetters(pluginHost, function(getterName) {
        return pluginHost.get("".concat(getterName, "Getter"), _this.plugin);
      }).getters;
      var nextParams = params;
      var actions = getAvailableActions(pluginHost, function(actionName) {
        return actionName === name ? function(newParams) {
          nextParams = newParams;
        } : pluginHost.collect("".concat(actionName, "Action"), _this.plugin).slice().reverse()[0];
      });
      action(params, getters, actions);
      var nextAction = pluginHost.collect("".concat(name, "Action"), _this.plugin).slice().reverse()[0];
      if (nextAction) {
        nextAction(nextParams);
      }
    }, _a);
    pluginHost.registerPlugin(_this.plugin);
    _this.pluginRegistered = true;
    return _this;
  }
  ActionBase2.prototype.componentDidMount = function() {
    if (this.pluginRegistered) {
      return;
    }
    var _a = this.props, _b = PLUGIN_HOST_CONTEXT, pluginHost = _a[_b];
    pluginHost.registerPlugin(this.plugin);
    this.pluginRegistered = true;
  };
  ActionBase2.prototype.componentWillUnmount = function() {
    var _a = this.props, _b = PLUGIN_HOST_CONTEXT, pluginHost = _a[_b];
    pluginHost.unregisterPlugin(this.plugin);
    this.pluginRegistered = false;
  };
  ActionBase2.prototype.render = function() {
    return null;
  };
  return ActionBase2;
}(import_react.PureComponent);
var Action = withHostAndPosition(ActionBase);
var GetterBase = function(_super) {
  __extends(GetterBase2, _super);
  function GetterBase2(props) {
    var _a;
    var _this = _super.call(this, props) || this;
    var _b = props, _c = PLUGIN_HOST_CONTEXT, pluginHost = _b[_c], _d = POSITION_CONTEXT, positionContext = _b[_d];
    var name = props.name;
    var lastComputed;
    var lastTrackedDependencies = {};
    var lastResult;
    _this.plugin = (_a = {
      position: function() {
        return positionContext();
      }
    }, _a["".concat(name, "Getter")] = function(original) {
      var _a2 = _this.props, value = _a2.value, computed = _a2.computed;
      if (computed === void 0)
        return value;
      var getGetterValue = function(getterName) {
        return getterName === name ? original : pluginHost.get("".concat(getterName, "Getter"), _this.plugin);
      };
      if (computed === lastComputed && !isTrackedDependenciesChanged(pluginHost, lastTrackedDependencies, getGetterValue)) {
        return lastResult;
      }
      var _b2 = getAvailableGetters(pluginHost, getGetterValue), getters = _b2.getters, trackedDependencies = _b2.trackedDependencies;
      var actions = getAvailableActions(pluginHost);
      lastComputed = computed;
      lastTrackedDependencies = trackedDependencies;
      lastResult = computed(getters, actions);
      return lastResult;
    }, _a);
    pluginHost.registerPlugin(_this.plugin);
    _this.pluginRegistered = true;
    return _this;
  }
  GetterBase2.prototype.componentDidMount = function() {
    if (this.pluginRegistered) {
      return;
    }
    var _a = this.props, _b = PLUGIN_HOST_CONTEXT, pluginHost = _a[_b];
    pluginHost.registerPlugin(this.plugin);
    this.pluginRegistered = true;
  };
  GetterBase2.prototype.componentDidUpdate = function() {
    var _a = this.props, _b = PLUGIN_HOST_CONTEXT, pluginHost = _a[_b];
    pluginHost.broadcast(UPDATE_CONNECTION_EVENT);
  };
  GetterBase2.prototype.componentWillUnmount = function() {
    var _a = this.props, _b = PLUGIN_HOST_CONTEXT, pluginHost = _a[_b];
    pluginHost.unregisterPlugin(this.plugin);
    this.pluginRegistered = false;
  };
  GetterBase2.prototype.render = function() {
    return null;
  };
  return GetterBase2;
}(import_react.PureComponent);
var Getter = withHostAndPosition(GetterBase);
var globalTemplateId = 0;
var TemplateBase = function(_super) {
  __extends(TemplateBase2, _super);
  function TemplateBase2(props) {
    var _a;
    var _this = _super.call(this, props) || this;
    _this.children = function() {
      return void 0;
    };
    globalTemplateId += 1;
    _this.id = globalTemplateId;
    var _b = props, _c = PLUGIN_HOST_CONTEXT, pluginHost = _b[_c], _d = POSITION_CONTEXT, positionContext = _b[_d];
    var name = props.name, predicate = props.predicate;
    _this.plugin = (_a = {
      position: function() {
        return positionContext();
      }
    }, _a["".concat(name, "Template")] = {
      id: _this.id,
      predicate: function(params) {
        return predicate ? predicate(params) : true;
      },
      children: function() {
        var children = _this.props.children;
        return children;
      }
    }, _a);
    pluginHost.registerPlugin(_this.plugin);
    pluginHost.broadcast(RERENDER_TEMPLATE_SCOPE_EVENT, name);
    _this.pluginRegistered = true;
    return _this;
  }
  TemplateBase2.prototype.componentDidMount = function() {
    if (this.pluginRegistered) {
      return;
    }
    var _a = this.props, _b = PLUGIN_HOST_CONTEXT, pluginHost = _a[_b];
    var name = this.props.name;
    pluginHost.registerPlugin(this.plugin);
    pluginHost.broadcast(RERENDER_TEMPLATE_SCOPE_EVENT, name);
    this.pluginRegistered = true;
  };
  TemplateBase2.prototype.componentDidUpdate = function() {
    var _a = this.props, _b = PLUGIN_HOST_CONTEXT, pluginHost = _a[_b];
    pluginHost.broadcast(RERENDER_TEMPLATE_EVENT, this.id);
  };
  TemplateBase2.prototype.componentWillUnmount = function() {
    var _a = this.props, _b = PLUGIN_HOST_CONTEXT, pluginHost = _a[_b];
    var name = this.props.name;
    pluginHost.unregisterPlugin(this.plugin);
    pluginHost.broadcast(RERENDER_TEMPLATE_SCOPE_EVENT, name);
    this.pluginRegistered = false;
  };
  TemplateBase2.prototype.render = function() {
    return null;
  };
  return TemplateBase2;
}(import_react.PureComponent);
var Template = withHostAndPosition(TemplateBase);
var TemplateConnectorBase = function(_super) {
  __extends(TemplateConnectorBase2, _super);
  function TemplateConnectorBase2(props, context) {
    var _a;
    var _this = _super.call(this, props, context) || this;
    _this.trackedDependencies = {};
    _this.subscription = (_a = {}, _a[UPDATE_CONNECTION_EVENT] = function() {
      return _this.updateConnection();
    }, _a);
    return _this;
  }
  TemplateConnectorBase2.prototype.componentDidMount = function() {
    var pluginHost = this.context;
    pluginHost.registerSubscription(this.subscription);
  };
  TemplateConnectorBase2.prototype.componentWillUnmount = function() {
    var pluginHost = this.context;
    pluginHost.unregisterSubscription(this.subscription);
  };
  TemplateConnectorBase2.prototype.updateConnection = function() {
    var pluginHost = this.context;
    if (isTrackedDependenciesChanged(pluginHost, this.trackedDependencies)) {
      this.forceUpdate();
    }
  };
  TemplateConnectorBase2.prototype.render = function() {
    var pluginHost = this.context;
    var children = this.props.children;
    var _a = getAvailableGetters(pluginHost), getters = _a.getters, trackedDependencies = _a.trackedDependencies;
    this.trackedDependencies = trackedDependencies;
    var actions = getAvailableActions(pluginHost);
    return children(getters, actions);
  };
  return TemplateConnectorBase2;
}(import_react.Component);
TemplateConnectorBase.contextType = PluginHostContext;
var TemplateConnector = TemplateConnectorBase;
var TIMEOUT = 180;
var TouchStrategy = function() {
  function TouchStrategy2(delegate) {
    this.delegate = delegate;
    this.touchStartTimeout = null;
    this.dragging = false;
  }
  TouchStrategy2.prototype.isDragging = function() {
    return this.dragging;
  };
  TouchStrategy2.prototype.isWaiting = function() {
    return !!this.touchStartTimeout;
  };
  TouchStrategy2.prototype.cancelWaiting = function() {
    clearTimeout(this.touchStartTimeout);
    this.touchStartTimeout = void 0;
  };
  TouchStrategy2.prototype.start = function(e) {
    var _this = this;
    var _a = e.touches[0], x = _a.clientX, y = _a.clientY;
    this.touchStartTimeout = setTimeout(function() {
      _this.delegate.onStart({ x, y });
      _this.dragging = true;
    }, TIMEOUT);
  };
  TouchStrategy2.prototype.move = function(e) {
    this.cancelWaiting();
    if (this.dragging) {
      var _a = e.touches[0], clientX = _a.clientX, clientY = _a.clientY;
      e.preventDefault();
      this.delegate.onMove({ x: clientX, y: clientY });
    }
  };
  TouchStrategy2.prototype.end = function(e) {
    this.cancelWaiting();
    if (this.dragging) {
      var _a = e.changedTouches[0], clientX = _a.clientX, clientY = _a.clientY;
      this.delegate.onEnd({ x: clientX, y: clientY });
    }
    this.dragging = false;
  };
  return TouchStrategy2;
}();
var gestureCover;
var toggleGestureCover = function(toggle, cursor) {
  var style = {
    pointerEvents: toggle ? "all" : "none"
  };
  if (toggle && cursor) {
    style = __assign(__assign({}, style), { cursor });
  }
  if (!gestureCover) {
    style = __assign(__assign({}, style), { position: "fixed", top: 0, right: 0, left: 0, bottom: 0, opacity: 0, zIndex: 2147483647 });
    gestureCover = document.createElement("div");
    document.body.appendChild(gestureCover);
  }
  Object.keys(style).forEach(function(key) {
    gestureCover.style[key] = style[key];
  });
};
var clear = function() {
  var selection = window.getSelection && window.getSelection();
  if (selection) {
    if (selection.empty) {
      selection.empty();
    } else if (selection.removeAllRanges) {
      selection.removeAllRanges();
    }
  }
};
var BOUNDARY = 10;
var clamp = function(value, min, max) {
  return Math.max(Math.min(value, max), min);
};
var isBoundExceeded = function(_a, _b) {
  var initialX = _a.x, initialY = _a.y;
  var x = _b.x, y = _b.y;
  return clamp(x, initialX - BOUNDARY, initialX + BOUNDARY) !== x || clamp(y, initialY - BOUNDARY, initialY + BOUNDARY) !== y;
};
var MouseStrategy = function() {
  function MouseStrategy2(delegate) {
    this.delegate = delegate;
    this.mouseInitialOffset = null;
    this.dragging = false;
  }
  MouseStrategy2.prototype.isDragging = function() {
    return this.dragging;
  };
  MouseStrategy2.prototype.start = function(e) {
    var x = e.clientX, y = e.clientY;
    this.e = e;
    this.mouseInitialOffset = { x, y };
  };
  MouseStrategy2.prototype.move = function(e) {
    var x = e.clientX, y = e.clientY;
    var dragStarted = false;
    if (!this.dragging && this.mouseInitialOffset) {
      if (isBoundExceeded(this.mouseInitialOffset, { x, y })) {
        this.delegate.onStart(this.mouseInitialOffset);
        clear();
        dragStarted = true;
        this.dragging = true;
      }
    }
    if (this.dragging) {
      e.preventDefault();
      this.delegate.onMove({ x, y });
    }
    if (dragStarted) {
      var element = document.elementFromPoint(x, y);
      var cursor = element ? window.getComputedStyle(element).cursor : null;
      toggleGestureCover(true, cursor);
    }
  };
  MouseStrategy2.prototype.end = function(e) {
    if (this.dragging) {
      var x = e.clientX, y = e.clientY;
      toggleGestureCover(false);
      this.delegate.onEnd({ x, y });
    }
    this.mouseInitialOffset = null;
    this.dragging = false;
  };
  return MouseStrategy2;
}();
var eventEmitter;
var getSharedEventEmitter = function() {
  if (!eventEmitter) {
    eventEmitter = new EventEmitter();
    ["mousemove", "mouseup", "touchmove", "touchend", "touchcancel"].forEach(function(name) {
      return window.addEventListener(name, function(e) {
        return eventEmitter.emit([name, e]);
      }, { passive: false });
    });
  }
  return eventEmitter;
};
var RefHolder = (0, import_react.forwardRef)(function(_a, ref) {
  var _b;
  var children = _a.children;
  return (0, import_react.isValidElement)(children) ? typeof children.type === "string" ? (0, import_react.cloneElement)(children, { ref }) : (0, import_react.cloneElement)(children, {
    forwardedRef: ((_b = children.props) === null || _b === void 0 ? void 0 : _b.forwardedRef) ? function(node) {
      children.props.forwardedRef(node);
      if (typeof ref === "function") {
        ref(node);
      } else if (ref) {
        ref.current = node;
      }
    } : ref
  }) : (0, import_react.createElement)("div", { ref, style: { display: "contents" } }, children);
});
var draggingHandled = Symbol("draggingHandled");
var Draggable = function(_super) {
  __extends(Draggable2, _super);
  function Draggable2(props) {
    var _this = _super.call(this, props) || this;
    _this.eventParams = null;
    _this.detachNodeEvents = null;
    var delegate = {
      onStart: function(_a) {
        var x = _a.x, y = _a.y;
        var onStart = _this.props.onStart;
        if (!onStart)
          return;
        (0, import_react_dom.unstable_batchedUpdates)(function() {
          onStart({ x, y });
        });
      },
      onMove: function(_a) {
        var x = _a.x, y = _a.y;
        var onUpdate = _this.props.onUpdate;
        if (!onUpdate)
          return;
        (0, import_react_dom.unstable_batchedUpdates)(function() {
          onUpdate({ x, y });
        });
      },
      onEnd: function(_a) {
        var x = _a.x, y = _a.y;
        var onEnd = _this.props.onEnd;
        if (!onEnd)
          return;
        (0, import_react_dom.unstable_batchedUpdates)(function() {
          onEnd({ x, y });
        });
      }
    };
    _this.mouseStrategy = new MouseStrategy(delegate);
    _this.touchStrategy = new TouchStrategy(delegate);
    _this.elementRef = (0, import_react.createRef)();
    _this.mouseDownListener = _this.mouseDownListener.bind(_this);
    _this.touchStartListener = _this.touchStartListener.bind(_this);
    _this.globalListener = _this.globalListener.bind(_this);
    return _this;
  }
  Draggable2.prototype.componentDidMount = function() {
    getSharedEventEmitter().subscribe(this.globalListener);
    this.setupNodeSubscription();
  };
  Draggable2.prototype.componentDidUpdate = function() {
    this.setupNodeSubscription();
  };
  Draggable2.prototype.componentWillUnmount = function() {
    var _a;
    if (this.eventParams) {
      var _b = this.eventParams, isMouseEvent = _b.isMouseEvent, e = _b.e;
      if (isMouseEvent) {
        this.mouseStrategy.end(e);
      } else {
        this.touchStrategy.end(e);
      }
      this.eventParams = null;
    }
    (_a = this.detachNodeEvents) === null || _a === void 0 ? void 0 : _a.call(this);
    getSharedEventEmitter().unsubscribe(this.globalListener);
  };
  Draggable2.prototype.setupNodeSubscription = function() {
    var _this = this;
    var _a;
    var node = this.elementRef.current;
    if (!node)
      return;
    (_a = this.detachNodeEvents) === null || _a === void 0 ? void 0 : _a.call(this);
    node.addEventListener("mousedown", this.mouseDownListener);
    node.addEventListener("touchstart", this.touchStartListener, { passive: true });
    this.detachNodeEvents = function() {
      node.removeEventListener("mousedown", _this.mouseDownListener);
      node.removeEventListener("touchstart", _this.touchStartListener);
    };
  };
  Draggable2.prototype.mouseDownListener = function(e) {
    if (this.touchStrategy.isWaiting() || e[draggingHandled])
      return;
    e.preventDefault();
    this.mouseStrategy.start(e);
    e[draggingHandled] = true;
  };
  Draggable2.prototype.touchStartListener = function(e) {
    if (e[draggingHandled])
      return;
    this.touchStrategy.start(e);
    e[draggingHandled] = true;
  };
  Draggable2.prototype.saveEvent = function(e, isMouseEvent) {
    this.eventParams = {
      e,
      isMouseEvent
    };
  };
  Draggable2.prototype.globalListener = function(_a) {
    var _b = __read2(_a, 2), name = _b[0], e = _b[1];
    switch (name) {
      case "mousemove":
        this.saveEvent(e, true);
        this.mouseStrategy.move(e);
        break;
      case "mouseup":
        this.eventParams = null;
        this.mouseStrategy.end(e);
        break;
      case "touchmove": {
        this.saveEvent(e, false);
        this.touchStrategy.move(e);
        break;
      }
      case "touchend":
      case "touchcancel": {
        this.eventParams = null;
        this.touchStrategy.end(e);
        break;
      }
    }
    if (this.mouseStrategy.isDragging() || this.touchStrategy.isDragging()) {
      clear();
    }
  };
  Draggable2.prototype.render = function() {
    var _this = this;
    var _a = this.props, children = _a.children, dragItem = _a.dragItem;
    return (0, import_react.createElement)(RefHolder, { ref: function(node) {
      _this.elementRef.current = node;
      if (typeof dragItem === "function") {
        dragItem(node);
      } else if (dragItem) {
        dragItem.current = node;
      }
    } }, children);
  };
  return Draggable2;
}(import_react.PureComponent);
var DragDropContext = (0, import_react.createContext)(null);
var DragDropProviderCore = function() {
  function DragDropProviderCore2() {
    this.payload = null;
    this.dragEmitter = new EventEmitter();
  }
  DragDropProviderCore2.prototype.start = function(payload, clientOffset) {
    this.payload = payload;
    this.dragEmitter.emit({ clientOffset, payload: this.payload });
  };
  DragDropProviderCore2.prototype.update = function(clientOffset) {
    this.dragEmitter.emit({ clientOffset, payload: this.payload });
  };
  DragDropProviderCore2.prototype.end = function(clientOffset) {
    this.dragEmitter.emit({ clientOffset, payload: this.payload, end: true });
    this.payload = null;
  };
  return DragDropProviderCore2;
}();
var defaultProps = {
  onChange: function(_a) {
    var payload = _a.payload, clientOffset = _a.clientOffset;
  }
};
var DragDropProvider = function(_super) {
  __extends(DragDropProvider2, _super);
  function DragDropProvider2(props) {
    var _this = _super.call(this, props) || this;
    var onChange = _this.props.onChange;
    _this.dragDropProvider = new DragDropProviderCore();
    _this.dragDropProvider.dragEmitter.subscribe(function(_a) {
      var payload = _a.payload, clientOffset = _a.clientOffset, end = _a.end;
      onChange({
        payload: end ? null : payload,
        clientOffset: end ? null : clientOffset
      });
    });
    return _this;
  }
  DragDropProvider2.prototype.shouldComponentUpdate = function(nextProps) {
    var children = this.props.children;
    return nextProps.children !== children;
  };
  DragDropProvider2.prototype.render = function() {
    var children = this.props.children;
    return (0, import_react.createElement)(DragDropContext.Provider, { value: this.dragDropProvider }, children);
  };
  DragDropProvider2.defaultProps = defaultProps;
  return DragDropProvider2;
}(import_react.Component);
var defaultProps$1 = {
  onStart: function(_a) {
    var clientOffset = _a.clientOffset;
  },
  onUpdate: function(_a) {
    var clientOffset = _a.clientOffset;
  },
  onEnd: function(_a) {
    var clientOffset = _a.clientOffset;
  }
};
var DragSource = (0, import_react.forwardRef)(function(_a, ref) {
  var onStart = _a.onStart, onUpdate = _a.onUpdate, onEnd = _a.onEnd, payload = _a.payload, children = _a.children;
  var context = (0, import_react.useContext)(DragDropContext);
  var dragDropProvider = context;
  return (0, import_react.createElement)(Draggable, { onStart: function(_a2) {
    var x = _a2.x, y = _a2.y;
    dragDropProvider === null || dragDropProvider === void 0 ? void 0 : dragDropProvider.start(payload, { x, y });
    onStart === null || onStart === void 0 ? void 0 : onStart({ clientOffset: { x, y } });
  }, onUpdate: function(_a2) {
    var x = _a2.x, y = _a2.y;
    dragDropProvider === null || dragDropProvider === void 0 ? void 0 : dragDropProvider.update({ x, y });
    onUpdate === null || onUpdate === void 0 ? void 0 : onUpdate({ clientOffset: { x, y } });
  }, onEnd: function(_a2) {
    var x = _a2.x, y = _a2.y;
    dragDropProvider === null || dragDropProvider === void 0 ? void 0 : dragDropProvider.end({ x, y });
    onEnd === null || onEnd === void 0 ? void 0 : onEnd({ clientOffset: { x, y } });
  }, dragItem: ref }, children);
});
DragSource.defaultProps = defaultProps$1;
var clamp$1 = function(value, min, max) {
  return Math.max(Math.min(value, max), min);
};
var defaultProps$2 = {
  onEnter: function(args) {
  },
  onOver: function(args) {
  },
  onLeave: function(args) {
  },
  onDrop: function(args) {
  }
};
var DropTarget = function(_super) {
  __extends(DropTarget2, _super);
  function DropTarget2(props) {
    var _this = _super.call(this, props) || this;
    _this.isOver = false;
    _this.handleDrag = _this.handleDrag.bind(_this);
    _this.elementRef = (0, import_react.createRef)();
    return _this;
  }
  DropTarget2.prototype.componentDidMount = function() {
    var dragEmitter = this.context.dragEmitter;
    dragEmitter.subscribe(this.handleDrag);
  };
  DropTarget2.prototype.shouldComponentUpdate = function(nextProps) {
    var children = this.props.children;
    return nextProps.children !== children;
  };
  DropTarget2.prototype.componentWillUnmount = function() {
    var dragEmitter = this.context.dragEmitter;
    dragEmitter.unsubscribe(this.handleDrag);
  };
  DropTarget2.prototype.handleDrag = function(_a) {
    var payload = _a.payload, clientOffset = _a.clientOffset, end = _a.end;
    var _b = this.elementRef.current.getBoundingClientRect(), left = _b.left, top = _b.top, right = _b.right, bottom = _b.bottom;
    var _c = this.props, onDrop = _c.onDrop, onEnter = _c.onEnter, onLeave = _c.onLeave, onOver = _c.onOver;
    var isOver = clientOffset && clamp$1(clientOffset.x, left, right) === clientOffset.x && clamp$1(clientOffset.y, top, bottom) === clientOffset.y;
    if (!this.isOver && isOver)
      onEnter({ payload, clientOffset });
    if (this.isOver && isOver)
      onOver({ payload, clientOffset });
    if (this.isOver && !isOver)
      onLeave({ payload, clientOffset });
    if (isOver && end)
      onDrop({ payload, clientOffset });
    this.isOver = isOver && !end;
  };
  DropTarget2.prototype.render = function() {
    var children = this.props.children;
    return (0, import_react.createElement)(RefHolder, { ref: this.elementRef }, import_react.Children.only(children));
  };
  DropTarget2.defaultProps = defaultProps$2;
  return DropTarget2;
}(import_react.Component);
DropTarget.contextType = DragDropContext;
var SCROLL_OFFSET = 2;
var styles = {
  root: {
    position: "relative"
  },
  triggersRoot: {
    position: "absolute",
    top: 0,
    left: 0,
    height: "100%",
    width: "100%",
    overflow: "hidden",
    zIndex: -1,
    visibility: "hidden",
    opacity: 0
  },
  expandTrigger: {
    position: "absolute",
    top: 0,
    left: 0,
    height: "100%",
    width: "100%",
    overflow: "auto"
  },
  contractTrigger: {
    position: "absolute",
    top: 0,
    left: 0,
    height: "100%",
    width: "100%",
    overflow: "auto",
    minHeight: "1px",
    minWidth: "1px"
  },
  contractNotifier: {
    position: "absolute",
    top: 0,
    left: 0,
    width: "200%",
    height: "200%",
    minHeight: "2px",
    minWidth: "2px"
  }
};
var Sizer = function(_super) {
  __extends(Sizer2, _super);
  function Sizer2(props) {
    var _this = _super.call(this, props) || this;
    _this.getSize = function() {
      return {
        height: _this.rootNode.clientHeight,
        width: _this.rootNode.clientWidth
      };
    };
    _this.setupListeners = _this.setupListeners.bind(_this);
    _this.updateScrolling = _this.updateScrolling.bind(_this);
    _this.rootRef = (0, import_react.createRef)();
    return _this;
  }
  Sizer2.prototype.componentDidMount = function() {
    this.rootNode = this.rootRef.current;
    this.createListeners();
    this.expandTrigger.addEventListener("scroll", this.setupListeners);
    this.contractTrigger.addEventListener("scroll", this.setupListeners);
    this.setupListeners();
  };
  Sizer2.prototype.shouldComponentUpdate = function(prevProps) {
    if (prevProps.scrollTop !== this.props.scrollTop || prevProps.scrollLeft !== this.props.scrollLeft || prevProps.style && this.props.style && !shallowEqual(prevProps.style, this.props.style) || prevProps.style && !this.props.style || prevProps.children !== this.props.children) {
      return true;
    }
    return false;
  };
  Sizer2.prototype.componentDidUpdate = function() {
    var _a = this.props, scrollTop = _a.scrollTop, scrollLeft = _a.scrollLeft;
    if (scrollTop !== void 0 && scrollTop > -1) {
      this.rootNode.scrollTop = scrollTop;
    }
    if (scrollLeft !== void 0 && scrollLeft > -1) {
      this.rootNode.scrollLeft = scrollLeft;
    }
    this.updateScrolling(this.getSize());
  };
  Sizer2.prototype.componentWillUnmount = function() {
    this.expandTrigger.removeEventListener("scroll", this.setupListeners);
    this.contractTrigger.removeEventListener("scroll", this.setupListeners);
  };
  Sizer2.prototype.setupListeners = function() {
    var size = this.getSize();
    var width = size.width, height = size.height;
    this.expandNotifier.style.width = "".concat(width + SCROLL_OFFSET, "px");
    this.expandNotifier.style.height = "".concat(height + SCROLL_OFFSET, "px");
    this.updateScrolling(size);
    var onSizeChange = this.props.onSizeChange;
    onSizeChange(size);
  };
  Sizer2.prototype.createListeners = function() {
    this.triggersRoot = document.createElement("div");
    Object.assign(this.triggersRoot.style, styles.triggersRoot);
    this.rootNode.appendChild(this.triggersRoot);
    this.expandTrigger = document.createElement("div");
    Object.assign(this.expandTrigger.style, styles.expandTrigger);
    this.expandTrigger.addEventListener("scroll", this.setupListeners);
    this.triggersRoot.appendChild(this.expandTrigger);
    this.expandNotifier = document.createElement("div");
    this.expandTrigger.appendChild(this.expandNotifier);
    this.contractTrigger = document.createElement("div");
    Object.assign(this.contractTrigger.style, styles.contractTrigger);
    this.contractTrigger.addEventListener("scroll", this.setupListeners);
    this.triggersRoot.appendChild(this.contractTrigger);
    this.contractNotifier = document.createElement("div");
    Object.assign(this.contractNotifier.style, styles.contractNotifier);
    this.contractTrigger.appendChild(this.contractNotifier);
  };
  Sizer2.prototype.updateScrolling = function(size) {
    var width = size.width, height = size.height;
    this.contractTrigger.scrollTop = height;
    this.contractTrigger.scrollLeft = width;
    this.expandTrigger.scrollTop = SCROLL_OFFSET;
    this.expandTrigger.scrollLeft = SCROLL_OFFSET;
  };
  Sizer2.prototype.render = function() {
    var _a = this.props, onSizeChange = _a.onSizeChange, Container = _a.containerComponent, style = _a.style, scrollTop = _a.scrollTop, scrollLeft = _a.scrollLeft, restProps = __rest(_a, ["onSizeChange", "containerComponent", "style", "scrollTop", "scrollLeft"]);
    return (0, import_react.createElement)(
      Container,
      __assign({ forwardedRef: this.rootRef, style: style ? __assign(__assign({}, styles.root), style) : styles.root }, restProps)
    );
  };
  Sizer2.defaultProps = {
    containerComponent: "div"
  };
  return Sizer2;
}(import_react.Component);
var connectProps = function(WrappedComponent, getAdditionalProps) {
  var storedAdditionalProps = getAdditionalProps();
  var components = /* @__PURE__ */ new Set();
  var RenderComponent = function(_super) {
    __extends(RenderComponent2, _super);
    function RenderComponent2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    RenderComponent2.prototype.componentDidMount = function() {
      components.add(this);
    };
    RenderComponent2.prototype.componentWillUnmount = function() {
      components.delete(this);
    };
    RenderComponent2.prototype.render = function() {
      return (0, import_react.createElement)(WrappedComponent, __assign({}, this.props, storedAdditionalProps));
    };
    return RenderComponent2;
  }(import_react.PureComponent);
  RenderComponent.update = function() {
    storedAdditionalProps = getAdditionalProps();
    Array.from(components.values()).forEach(function(component) {
      return component.forceUpdate();
    });
  };
  return RenderComponent;
};
var createStateHelper = function(component, controlledStateProperties) {
  if (controlledStateProperties === void 0) {
    controlledStateProperties = {};
  }
  var notifyStateChange = function(nextState, state) {
    Object.keys(controlledStateProperties).forEach(function(propertyName) {
      var changeEvent = controlledStateProperties[propertyName]();
      if (changeEvent && nextState[propertyName] !== state[propertyName]) {
        changeEvent(nextState[propertyName]);
      }
    });
  };
  var lastStateUpdater;
  var initialState = null;
  var lastInitialState = null;
  var newState = null;
  var shouldNotify = false;
  var applyReducer = function(reduce, payload, callback) {
    var stateUpdater = function(prevState) {
      if (initialState === null) {
        initialState = prevState;
      }
      var stateChange = reduce(__assign({}, prevState), payload);
      var state = __assign(__assign({}, prevState), stateChange);
      if (typeof callback === "function") {
        callback(state, prevState);
      }
      if (stateUpdater === lastStateUpdater) {
        if (lastInitialState !== initialState) {
          newState = state;
          if (!shouldNotify) {
            lastInitialState = initialState;
            shouldNotify = true;
          }
        }
        initialState = null;
      }
      return stateChange;
    };
    lastStateUpdater = stateUpdater;
    component.setState(stateUpdater, function() {
      if (shouldNotify) {
        notifyStateChange(newState, lastInitialState);
        shouldNotify = false;
      }
    });
  };
  var applyFieldReducer = function(field, reduce, payload) {
    applyReducer(function(state) {
      var _a;
      return _a = {}, _a[field] = reduce(state[field], payload), _a;
    });
  };
  return {
    applyReducer,
    applyFieldReducer
  };
};
var makeBoundComponent = function(Target, components, exposed) {
  var Component2 = function(_super) {
    __extends(Component3, _super);
    function Component3() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    Component3.prototype.render = function() {
      return (0, import_react.createElement)(Target, __assign({}, components, this.props));
    };
    return Component3;
  }(import_react.PureComponent);
  Component2.components = Target.components;
  Object.assign(Component2, exposed);
  return Component2;
};
var withComponents = function(components) {
  return function(Target) {
    var props = {};
    var exposed = {};
    var targetComponents = Target.components;
    Object.entries(targetComponents).forEach(function(_a) {
      var _b = __read2(_a, 2), fieldName = _b[0], componentName = _b[1];
      var component = components[componentName];
      if (component && component !== Target[componentName]) {
        props[fieldName] = component;
      }
      exposed[componentName] = component || Target[componentName];
    });
    return Object.keys(props).length > 0 ? makeBoundComponent(Target, props, exposed) : Target;
  };
};
var RefType = import_prop_types.default.shape({
  current: import_prop_types.default.instanceOf(typeof Element !== "undefined" ? Element : Object)
});

export {
  hasWindow,
  Plugin,
  TemplatePlaceholder,
  PlaceholderWithRef,
  PluginHost2 as PluginHost,
  Action,
  Getter,
  Template,
  TemplateConnector,
  clear,
  RefHolder,
  Draggable,
  DragDropProvider,
  DragSource,
  DropTarget,
  Sizer,
  connectProps,
  createStateHelper,
  withComponents,
  RefType
};
/*! Bundled license information:

@devexpress/dx-core/dist/dx-core.es.js:
  (*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** *)

@devexpress/dx-react-core/dist/dx-react-core.es.js:
  (*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** *)
*/
//# sourceMappingURL=chunk-OSUPB7U7.js.map
